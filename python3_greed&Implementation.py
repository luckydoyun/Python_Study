# 2022.08.03
# 그리디 알고리즘 : 현재 상황에서 지금 당장 좋은 것만 고르는 방법
# - 정당성 분석이 중요하다.
# - 단순히 가장 좋아 보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토

# 1. 어떻게 하면 최적의 해를 구할 수 있을까?
# 2. 생각한 방법이 주어진 조건에 부합하는가?
# 3. 예외의 경우가 생기진 않는가?

# [문제] 곱하기 혹은 더하기
# 각 자리가 숫자(0~9)로만 이루어진 문자열 S가 주어졌을 때,
# 왼쪽부터 오른쪽으로 하나씩 모든 숫자를 확인하며 숫자 사이에 'X' 혹은 '+' 연산자를 넣어
# 결과적으로 만들어질 수 있는 가장 큰 수를 구하는 프로그램을 작성.
# 단, +보다 X를 먼저 계산하는 일반적인 방식과는 달리, 모든 연산은 왼쪽에서 부터 순서대로 이루어진다.
# 예를 들어 02984라는 문자열로 만들 수 있는 가장 큰 수는 (0+2) * 9 * 8 * 4 = 576이다.

# 구현 알고리즘 : 풀이를 떠올리는 것은 쉽지만 소스코드로 옮기기 어려운 문제
# 구현 유형 예시
# - 알고리즘은 간단한데 코드가 지나칠 만큼 길어지는 문제
# - 실수 연산을 다루고, 특정 소수점 자리까지 출력해야 하는 문제
# - 문자열을 특정한 기준에 따라서 끊어 처리해야 하는 문제
# - 적절한 라이브러리를 찾아서 사용해야 하는 문제
# 방향벡터를 자주 사용하자

#    동, 북, 서, 남
# dx = [0, -1, 0, 1]
# dy = [1, 0, -1, 0]

# 리스트를 문자열로 변환하여 출력
# print(''.join()) join앞에있는 ''는 구분자라고 생각하면 된다.